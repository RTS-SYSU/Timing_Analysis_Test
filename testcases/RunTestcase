#!/bin/bash
set -e
set -o pipefail
set -u

# 定义常量
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
BENCHMARK_DIR="$SCRIPT_DIR"

# 检查参数
if [ $# -lt 1 ]; then
    echo "Usage: $0 [testcase|test] [options]" >&2
    exit 1
fi

# # 加载依赖脚本
# source "$SCRIPT_DIR/util_scripts/OptionHandler.sh"
# source "$SCRIPT_DIR/util_scripts/llvmta_utils.sh"

# # 初始化选项
# init_options "${@:2}"  # 跳过第一个参数（testcase/test）
# llvmta_defaults

# 处理测试目标
process_testcase() {
	# 加载依赖脚本
	source "$SCRIPT_DIR/util_scripts/OptionHandler.sh"
	source "$SCRIPT_DIR/util_scripts/llvmta_utils.sh"

	# 初始化选项
	init_options "${@:2}"  # 跳过第一个参数（testcase/test）
	llvmta_defaults

    local TESTCASE_DIR="$1"
    echo "正在处理测试用例: $TESTCASE_DIR"

    # 检查必要文件
    loopanno="${TESTCASE_DIR}/LoopAnnotations.csv"
	# 修改核心信息文件匹配规则（示例）
	coreinfo=$(find "$TESTCASE_DIR" -maxdepth 1 -name "test_*.json")


    # 添加核心信息
    if [ -f "$coreinfo" ]; then
        add_option "--core-info=$coreinfo"
    fi

    # 添加循环注解
    if [ -f "$loopanno" ]; then
        add_option "--ta-loop-bounds-file=$loopanno"
    fi

    # 设置固定参数
    add_option "--core-numbers=2"
    add_option "--ta-multicore-type=zhangw" 
    add_option "--ta-zs-task=true" 
    # add_option "--ta-icache-nsets=1"
    # add_option "--ta-icache-assoc=1"
    # add_option "--ta-dcache-linesize=64"
    # add_option "--ta-dcache-nsets=1"
    # add_option "--ta-dcache-assoc=1"
    # add_option "--ta-mem-latency=150"
    # add_option "--ta-dcache-persistence=none"
    # add_option "--ta-icache-persistence=none"

    # 生成并执行命令
    cmdline=("${SCRIPT_DIR}/runllvmta.sh" "$TESTCASE_DIR" "${USEROPTS[@]}")
    echo "执行命令：${cmdline[@]}"
    "${cmdline[@]}"

	input="${TESTCASE_DIR}/build/main/TotalBound.xml"
	awk '/<bounds>/{c++} c==2' "$input" | sed -n '/<bounds>/,/<\/bounds>/p' >> "${TEST_DIR}/out.xml"

    input2="${TESTCASE_DIR}/build/main/Zhao_Output.txt"
    output="${TEST_DIR}/Zhao_Output.txt"
    # 将 input2 的内容追加到 output 文件末尾
    cat "$input2" >> "$output"

}

# 主逻辑
case "$1" in
    batchtest)
        # 批量处理test目录下的所有test_*子目录
        TEST_DIR="${BENCHMARK_DIR}/batchtest"
        if [ ! -d "$TEST_DIR" ]; then
            echo "错误：找不到test目录 $TEST_DIR" >&2
            exit 2
        fi
		# 清空旧的输出文件
		> "$TEST_DIR/out.txt"
        > "$TEST_DIR/Zhao_Output.txt"

        # 查找所有test_开头的子目录
        find "$TEST_DIR" -maxdepth 1 -type d -name "test_*" | while read -r dir; do
            # 跳过无效目录
            [ -d "$dir" ] || continue
            # 重置用户选项（重要！）
            USEROPTS=()
            # 处理每个测试用例
            process_testcase "$dir"
        done
        ;;
    *)
        # 单个测试用例处理（原逻辑）
        TESTCASE="$1"
        TESTCASE_DIR=$(find "$BENCHMARK_DIR" \
            -type d \
            -wholename "*/$TESTCASE" \
            ! -wholename "*/build/*")

        if [ ! -d "$TESTCASE_DIR" ]; then
            echo "无法找到测试用例: $TESTCASE" >&2
            exit 2
        fi

        process_testcase "$TESTCASE_DIR"
        ;;
esac

exit 0
